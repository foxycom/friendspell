apply plugin: 'com.android.application'

tasks.matching {it instanceof Test}.all {
  testLogging.events = ["failed", "passed", "skipped"]
}

// Load Jacoco Only if needed
if (jacocoEnabled.toBoolean()) {
  project.logger.lifecycle('Applying jacoco build file: jacoco.gradle')
  apply from: rootProject.file("jacoco.gradle")
}


// General switch for tests types this control report generation but not yet unit test selection - TODO Make this a flag
def carvedTests = project.hasProperty('carvedTests')// ? project.getProperty('carvedTests') : false //Default value false

def carvedTestSrcDir = "src/carvedTest"
def testReportPrefix = "${buildDir}/carvedTest/testExecution"
def coverageReportPrefix = "${buildDir}/carvedTest/coverage"

if (carvedTests) {
  if (project.hasProperty('testName')) {
    def testName = project.getProperty('testName')
    println ""
    println "* Processing Carved Test ${testName}"
    println ""

    carvedTestSrcDir = "src/carvedTest/${testName}"

    testReportPrefix = "${buildDir}/carvedTest/${testName}/testExecution"
    coverageReportPrefix = "${buildDir}/carvedTest/${testName}/coverage"
  }
}

android {
  compileSdkVersion 27
  buildToolsVersion '27.0.1'

  sourceSets {
    test {
      if (carvedTests) {
        java.srcDirs = ["$carvedTestSrcDir"]
      }
    }
  }

  defaultConfig {
    applicationId 'com.sqisland.friendspell'
    minSdkVersion 23
    targetSdkVersion 27
    versionCode 5
    versionName '1.1.1'
    vectorDrawables.useSupportLibrary = true

    testInstrumentationRunner 'com.sqisland.friendspell.util.MockTestRunner'
  }

  buildTypes {
    debug {
      testCoverageEnabled jacocoEnabled.toBoolean()
    }
  }

  productFlavors {
    canned {
    }
    normal {
    }
  }


  flavorDimensions "default"

  // Remove cannedRelease as it's not needed.
  android.variantFilter { variant ->
    if(variant.buildType.name == 'release'
            && variant.getFlavors().get(0).name == 'canned') {
      variant.setIgnore(true)
    }
  }

  packagingOptions {
    exclude 'LICENSE.txt'
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
    }

    animationsDisabled true

    unitTests.all {

      jvmArgs "-Xmx2g"

      // Nices output on the console/logs
      testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
      }

      test {
        //Get last path of default set path.
        def junitXmlTestTaskName = file("$reports.junitXml.destination").name
        def htmlTestTaskName = file("$reports.html.destination").name

        if (carvedTests) {
          // Just use the same?
          reports.junitXml.destination = file("$testReportPrefix/$junitXmlTestTaskName")
          reports.html.destination = file("$testReportPrefix/$junitXmlTestTaskName")
        }

        filter {
          //specific test method
          if (project.hasProperty('carvedTestsFilter')){
            includeTestsMatching project.carvedTestsFilter
          }
        }
      }
    }
  }
}

final DAGGER_VERSION = '2.13'
final BUTTERKNIFE_VERSION = '8.8.1'
final GOOGLE_PLAY_SERVICES_VERSION = '11.6.0'
final SUPPORT_LIB_VERSION = '27.0.1'
final ESPRESSO_VERSION = '3.0.1'

dependencies {
  implementation "com.google.dagger:dagger:${DAGGER_VERSION}"
  annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
  provided 'javax.annotation:javax.annotation-api:1.2'

  implementation "com.android.support:appcompat-v7:${SUPPORT_LIB_VERSION}"
  implementation "com.android.support:support-v4:${SUPPORT_LIB_VERSION}"
  implementation "com.google.android.gms:play-services-plus:${GOOGLE_PLAY_SERVICES_VERSION}"
  implementation "com.google.android.gms:play-services-nearby:${GOOGLE_PLAY_SERVICES_VERSION}"
  implementation "com.google.android.gms:play-services-auth:${GOOGLE_PLAY_SERVICES_VERSION}"

  implementation 'nl.qbusict:cupboard:2.2.0'
  implementation 'com.google.code.gson:gson:2.8.2'
  implementation 'com.squareup.picasso:picasso:2.5.2'

  implementation 'com.jakewharton.timber:timber:4.6.0'
  implementation "com.jakewharton:butterknife:${BUTTERKNIFE_VERSION}"
  annotationProcessor "com.jakewharton:butterknife-compiler:${BUTTERKNIFE_VERSION}"

  testImplementation 'junit:junit:4.12'

  androidTestImplementation ('com.android.support.test:runner:1.0.1') {
    exclude module: 'support-annotations'
  }
  androidTestImplementation ('com.android.support.test:rules:1.0.1') {
    exclude module: 'support-annotations'
  }
  androidTestImplementation ("com.android.support.test.espresso:espresso-core:${ESPRESSO_VERSION}") {
    exclude module: 'support-annotations'
  }
  androidTestImplementation ("com.android.support.test.espresso:espresso-intents:${ESPRESSO_VERSION}") {
    exclude module: 'support-annotations'
  }

  testImplementation 'org.robolectric:robolectric:4.2'
  testImplementation 'org.mockito:mockito-core:2.6.3'

  androidTestImplementation 'org.mockito:mockito-android:2.12.0'
  androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
}

